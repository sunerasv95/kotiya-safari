/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ (() => {

eval("// require('bootstrap');\n$(function () {\n  var checkInDatePicker = $('#check-in-datepicker');\n  var checkOutDatePicker = $('#check-out-datepicker');\n  setTimeout(function () {\n    if ($(\".alert-danger\").hasClass(\"show\")) {\n      $(\".alert-danger\").removeClass(\"show\").addClass(\"fade\").remove();\n    }\n    if ($(\".alert-success\").hasClass(\"show\")) {\n      $(\".alert-success\").removeClass(\"show\").addClass(\"fade\").remove();\n    }\n  }, 8000);\n  checkInDatePicker.datepicker({\n    format: 'mm/dd/yyyy',\n    startDate: \"-1d\"\n  });\n  checkOutDatePicker.datepicker({\n    format: 'mm/dd/yyyy'\n  });\n  console.log('on load');\n});\nvar inquiryModal = document.getElementById('reservation-inquiry-modal');\ninquiryModal.addEventListener('show.bs.modal', function (event) {\n  fetchCountries().then(function (res) {\n    //console.log('res', res);\n    var opts = [];\n    res === null || res === void 0 ? void 0 : res.data.forEach(function (c) {\n      //console.log('c', c);\n      var opt = \"<option value='\".concat(c.abbreviation, \"'>\").concat(c.country, \"</option>\");\n      opts.push(opt);\n    });\n    $('#country').append(opts);\n  })[\"catch\"](function (err) {\n    console.log('err', err);\n  });\n});\ninquiryModal.addEventListener('hidden.bs.modal', function (event) {\n  // fetchCountries()\n  //     .then(function (res) {\n  //         console.log('res', res);\n  //         var opts = [];\n  //         res?.data.forEach(c => {\n  //             console.log('c', c);\n  //             var opt = `<option value='${c.abbreviation}'>${c.country}</option>`;\n  //             opts.push(opt);\n  //         });\n\n  //         $('#country').append(opts);\n  //     })\n  //     .catch(function (err) {\n  //         console.log('err', err);\n  //     });\n  console.log('closed');\n  var validator = $('#inquiry-form').validate();\n  validator.resetForm();\n});\n$(document).on('click', '#inquiry-submit', function () {\n  $('#inquiry-form').validate({\n    rules: {\n      full_name: {\n        required: true\n      },\n      email: {\n        required: true,\n        email: true\n      },\n      check_in: {\n        required: true,\n        date: true\n      },\n      check_out: {\n        required: true,\n        date: true\n      },\n      flexible_dates: {\n        required: false\n      },\n      no_adults: {\n        required: true\n      },\n      no_kids: {\n        required: true\n      },\n      country: {\n        required: true\n      },\n      tc_agreed: {\n        required: true\n      }\n    },\n    submitHandler: function submitHandler(form) {\n      var button = $('#inquiry-submit');\n      showButtonSpinner(button);\n      submitInquiry(form).then(function (res) {\n        console.log(\"inquiry res\", res);\n        if (!(res !== null && res !== void 0 && res.error)) {\n          setTimeout(function () {\n            var _res$data, _res$data2;\n            hideButtonSpinner(button, \"Submit Inquiry\");\n            $('#reservation-inquiry-modal').modal('toggle');\n            if (res !== null && res !== void 0 && (_res$data = res.data) !== null && _res$data !== void 0 && _res$data.callback_url) location.href = res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.callback_url;\n          }, 1500);\n        }\n      })[\"catch\"](function (err) {\n        var _err$responseJSON;\n        hideButtonSpinner(button, \"Submit Inquiry\");\n        if (err !== null && err !== void 0 && (_err$responseJSON = err.responseJSON) !== null && _err$responseJSON !== void 0 && _err$responseJSON.errors) {\n          var _err$responseJSON2;\n          var validatorErrors = {};\n          var es = err === null || err === void 0 ? void 0 : (_err$responseJSON2 = err.responseJSON) === null || _err$responseJSON2 === void 0 ? void 0 : _err$responseJSON2.errors;\n          Object.entries(es).forEach(function (e, i) {\n            validatorErrors[e[0]] = e[1][0];\n          });\n          var validator = $(\"#inquiry-form\").validate();\n          validator.showErrors(validatorErrors);\n        }\n      });\n    },\n    errorClass: \"is-invalid\",\n    errorElement: \"div\",\n    errorPlacement: function errorPlacement(error, element) {\n      error.addClass('invalid-feedback');\n      error.appendTo(element.parents(\".form-group\"));\n    }\n  });\n});\nfunction showButtonSpinner(btnElement) {\n  if (btnElement.length) {\n    btnElement.attr(\"disable\", \"disable\").html(\"<span class='spinner-border spinner-border-sm' role='status' aria-hidden='true'></span><span class='px-1'>Submiting...</span>\");\n  }\n}\nfunction hideButtonSpinner(btnElement, btnText) {\n  if (btnElement.length) {\n    btnElement.removeAttr(\"disable\", \"disable\").empty().text(btnText);\n  }\n}\nfunction fetchCountries() {\n  return new Promise(function (resolve, reject) {\n    $.ajax({\n      headers: {\n        \"X-CSRF-TOKEN\": $('meta[name=\"csrf-token\"]').attr('content')\n      },\n      url: \"/guest/countries\",\n      dataType: \"JSON\",\n      type: \"GET\",\n      success: function success(res) {\n        resolve(res);\n      },\n      error: function error(err) {\n        reject(err);\n      }\n    });\n  });\n}\nfunction submitInquiry(form) {\n  return new Promise(function (resolve, reject) {\n    $.ajax({\n      headers: {\n        \"X-CSRF-TOKEN\": $('meta[name=\"csrf-token\"]').attr('content')\n      },\n      url: \"/inquiries/submitRequest\",\n      dataType: \"JSON\",\n      type: \"POST\",\n      data: $(\"#inquiry-form\").serialize(),\n      success: function success(res) {\n        resolve(res);\n      },\n      error: function error(err) {\n        reject(err);\n      }\n    });\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/app.js"]();
/******/ 	
/******/ })()
;